// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  login42 String @unique

  username String @unique
  avatar   String

  tfaSecret  String?
  tfaEnabled Boolean @default(false)

  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")

  gamesCreated Game[] @relation("hasCreatedGame")
  gamesJoined  Game[] @relation("hasJoinedGame")

  ownerOfChannels Channel[]        @relation("isOwnerOfChannel")
  AdminOfChannel  AdminOfChannel[]

  blockerOf  UserBlockedUser[]       @relation("haveBlockedUsers")
  blockedBy  UserBlockedUser[]       @relation("isBlockedByUsers")
  bannedFrom UserBannedFromChannel[]

  Message         Message[]
  MemberOfChannel MemberOfChannel[]

  @@map("users")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
  @@map("follows")
}

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  player1   User @relation("hasCreatedGame", fields: [idPlayer1], references: [id])
  idPlayer1 Int
  player2   User @relation("hasJoinedGame", fields: [idPlayer2], references: [id])
  idPlayer2 Int

  scorePlayer1 Int
  scorePlayer2 Int

  @@map(name: "games")
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}

model Channel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name        String
  type        ChannelType
  isProtected Boolean     @default(false)
  password    String?

  owner   User @relation("isOwnerOfChannel", fields: [ownerId], references: [id])
  ownerId Int

  AdminOfChannel        AdminOfChannel[]
  UserBannedFromChannel UserBannedFromChannel[]
  Message               Message[]
  MemberOfChannel       MemberOfChannel[]

  @@map(name: "channels")
}

model MemberOfChannel {
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@id([channelId, userId])
}

model AdminOfChannel {
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  admin   User @relation(fields: [adminId], references: [id])
  adminId Int

  @@id([channelId, adminId])
}

model UserBlockedUser {
  blocker   User @relation("haveBlockedUsers", fields: [blockerId], references: [id])
  blockerId Int

  blockee   User @relation("isBlockedByUsers", fields: [blockeeId], references: [id])
  blockeeId Int

  @@id([blockerId, blockeeId])
}

model UserBannedFromChannel {
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  isBanned   Boolean @default(false)
  duration  Int @default(15)
  startedAt DateTime @default(now())

  @@id([channelId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  sender   User @relation(fields: [senderId], references: [id])
  senderId Int

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  content String

  @@map(name: "messages")
}
