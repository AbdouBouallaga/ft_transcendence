version: '3.7'

networks:
  my-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/24

services:
  loadbalancer:
    image: nginx:1.19.6
    container_name: loadbalancer
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./storage/nginx/conf.d:/etc/nginx/conf.d
      - ./src/frontend_next/public:/usr/share/nginx/html/public
    networks:
      my-network:
        ipv4_address: 10.0.0.111

  Frontend:
    image: node:18.12.1-buster
    container_name: Frontend
    restart: always
    volumes:
      - ./src/frontend_next:/usr/src/app
    working_dir: /usr/src/app
    # command: bash -c "npm install && npm run dev"
    command: bash -c "npm install && npm run build && npm run start"
    extra_hosts:
      - "api.127.0.0.1.nip.io:10.0.0.3"
    networks:
      my-network:
        ipv4_address: 10.0.0.2
  
  Backend:
    image: node:18.12.1-buster
    container_name: Backend
    restart: always
    volumes:
      - ./src/backend_nest:/usr/src/app
    depends_on:
      - postgres
    working_dir: /usr/src/app
    # command: bash -c "npm install && npx prisma migrate reset --force && npx prisma studio > /dev/null | npm run start:dev"
    command: bash -c "npm install && npx prisma migrate deploy &&  npm run start"
    #  npx prisma generate || npx prisma dev
    networks:
      my-network:
        ipv4_address: 10.0.0.3

  postgres:
    image: postgres:15.1-bullseye
    container_name: postgres
    restart: always
    volumes:
      - ./storage/postgres_data:/var/lib/postgresql/data
    env_file:
      - ./env/.postgres.env
    networks:
      my-network:
        ipv4_address: 10.0.0.4
    expose:
      - 5432
